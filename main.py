#! python
# coding=utf-8
"""Chubaka bot"""

import discord
from discord.ext import commands
import logging
import pickle

logger = logging.getLogger('discord')
logger.setLevel(logging.INFO)
handler = logging.FileHandler(filename='discord.log', encoding='utf-8', mode='w')
handler.setFormatter(logging.Formatter('%(asctime)s:%(levelname)s:%(name)s: %(message)s'))
logger.addHandler(handler)

msgs = {'hello': '–î—Ä–∞—Ç—É—Ç–∏!'}
imgs = {'bedy': 'bedy_s_bashkoj.jpg'}
snds = {'blya': 'blyat_chto.ogg', 'izv': 'izvinite.ogg', 'bat': 'batyushki.ogg', 'uzh': 'uzhas.ogg',
        'nah': 'poshyol_nahuj.ogg', 'logo': 'bananana.ogg', 'logo1': 'banananana.ogg'}
games = {'numb': 'guessing_number.py', 'b&c': 'bulls_and_cows.py', 'stones': 'stones.py'}
tests = {'ench': ''}

fileNotFound = '–û—à–∏–±–∫–∞: —Ñ–∞–π–ª **{}** –Ω–µ –Ω–∞–π–¥–µ–Ω.'


def load_data(file_name):
    try:
        with open(file_name, 'rb') as db:
            data_ = pickle.load(db)
    except (FileNotFoundError, pickle.UnpicklingError):
        print(f'–ù–µ —É–¥–∞–ª–æ—Å—å —Å—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ "{file_name}".')
        data_ = {'homes': {}, 'games': {}, 'tests': {}}
    return data_


def save_data(data_):
    with open('data', 'wb') as db_:
        pickle.dump(data_, db_)


class IntConvert(commands.Converter):
    async def convert(self, ctx, argument):
        if argument.isnumeric():
            return int(argument)
        else:
            trans_roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}
            try:
                arabic = [trans_roman[i] for i in argument.upper()]
            except KeyError:
                raise commands.BadArgument
            i = 1
            while i < len(arabic):
                if arabic[i - 1] < arabic[i]:
                    arabic[i - 1] = -arabic[i - 1]
                    i += 2
                else:
                    i += 1
            return sum(arabic)


data = load_data('data')
bot = commands.Bot(command_prefix='&')


async def mylogout():
    save_data(data)
    await bot.logout()


@bot.event
async def on_ready():
    print(f'{bot.user} –≥–æ—Ç–æ–≤!')


@bot.event
async def on_command_error(ctx, error):
    if isinstance(error, commands.BadArgument):
        # await ctx.channel.send(f'–ù–µ –º–æ–≥—É –ø–æ–Ω—è—Ç—å –≤–≤–µ–¥—ë–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É:\n"{ctx.message}"')
        ctx.message.add_reaction('‚ùì')
    elif isinstance(error, commands.CheckFailure):
        # await ctx.channel.send(f'–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É:\n"{ctx.message}"')
        ctx.message.add_reaction('‚ùì')


@bot.command()
@commands.is_owner()
async def kill(ctx):
    await ctx.channel.send('–ö–∞–∫–æ–π –∂–µ—Å—Ç–æ–∫–∏–π –º–∏—Ä!\n–û—Ç–∫–ª—é—á–∞—é—Å—å...')
    await mylogout()


@kill.error
async def kill_error(ctx, error):
    if isinstance(error, commands.CheckFailure):
        await ctx.channel.send(file=discord.File('sounds/poshyol_nahuj.ogg', 'kill.ogg'))


@bot.command()
async def sethome(ctx):
    home = data['homes'].get(ctx.guild.id)
    if home == ctx.channel.id:
        await ctx.channel.send('–ú–æ–π –¥–æ–º —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.')
    else:
        data['homes'][ctx.guild.id] = ctx.channel.id
        await ctx.channel.send('–£—Ä–∞! –¢–µ–ø–µ—Ä—å —É –º–µ–Ω—è –µ—Å—Ç—å –¥–æ–º –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ. üè†')


@bot.command(name='home')
async def home_(ctx):
    home = data['homes'].get(ctx.guild.id)
    if home == ctx.channel.id:
        await ctx.channel.send('–ú–æ–π –¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–º –∫–∞–Ω–∞–ª–µ.')
    elif home is not None:
        await ctx.channel.send(f'–ú–æ–π –¥–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–Ω–∞–ª–µ <#{home}>')
    else:
        await ctx.channel.send('–ó–¥–µ—Å—å —É –º–µ–Ω—è –µ—â—ë –Ω–µ—Ç –¥–æ–º–∞. üòï')


@bot.command()
async def delhome(ctx):
    home = data['homes'].pop(ctx.guild.id, None)
    if home is not None:
        await ctx.channel.send('–¢–µ–ø–µ—Ä—å —è –±–µ–∑–¥–æ–º–Ω—ã–π. üòü')
    else:
        await ctx.channel.send('–£ –º–µ–Ω—è –∏ —Ç–∞–∫ –Ω–µ –¥–æ–º–∞. üò≠')


@bot.command()
async def say(ctx, arg):
    if arg == 'list':
        await ctx.channel.send(f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {", ".join(msgs)}.')
    elif arg in msgs:
        try:
            await ctx.channel.send(msgs[arg])
        except FileNotFoundError:
            await ctx.channel.send(fileNotFound.format(msgs[arg]))


@bot.command()
async def image(ctx, arg):
    if arg == 'list':
        await ctx.channel.send(f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫: {", ".join(imgs)}.')
    elif arg in imgs:
        try:
            await ctx.channel.send(file=discord.File('images/' + imgs[arg]))
        except FileNotFoundError:
            await ctx.channel.send(fileNotFound.format(imgs[arg]))


@bot.command()
async def sound(ctx, arg):
    if arg == 'list':
        await ctx.channel.send(f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–≤—É–∫–æ–∑–∞–ø–∏—Å–µ–π: {", ".join(snds)}.')
    elif arg in snds:
        try:
            await ctx.channel.send(file=discord.File('sounds/' + snds[arg]))
        except FileNotFoundError:
            await ctx.channel.send(fileNotFound.format(snds[arg]))


@bot.command()
async def play(ctx, arg):
    if arg == 'list':
        await ctx.channel.send(f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–≥—Ä: {", ".join(games)}.')
    else:
        homes = data['homes']
        guild = ctx.guild.id
        if guild in homes:
            home = homes[guild]
            if home == ctx.channel.id:
                with home.typing():
                    # TODO games
                    pass
            else:
                await ctx.channel.send('–¢—ã –∂–µ –Ω–µ —Ö–æ—á–µ—à—å —É—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–µ—Å—å –ø–æ–≥—Ä–æ–º?',
                                       '–î–∞–≤–∞–π –ª—É—á—à–µ –∏–≥—Ä–∞—Ç—å —É –º–µ–Ω—è –¥–æ–º–∞! üòâ')
        else:
            await ctx.channel.send('–ú–Ω–µ –Ω—É–∂–µ–Ω –¥–æ–º, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—ã–≥—Ä–∞—Ç—å!')


@bot.group()
async def test(ctx):
    if ctx.invoked_subcommand is None:
        raise commands.BadArgument('–ù–µ—Ç —Å—É–±–∫–æ–º–∞–Ω–¥—ã')


@test.command(name='list')
async def list_(ctx):
    await ctx.channel.send(f'–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤: {", ".join(tests)}.')


@test.command()
async def get(ctx, arg, n: IntConvert = 1):
    home = data['homes'].get(ctx.guild.id)
    if home is None:
        await ctx.channel.send('–ú–Ω–µ –Ω—É–∂–µ–Ω –¥–æ–º, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ —Å—ã–≥—Ä–∞—Ç—å!')
    elif home != ctx.channel.id:
        await ctx.channel.send('–¢—ã –∂–µ –Ω–µ —Ö–æ—á–µ—à—å —É—Å—Ç—Ä–æ–∏—Ç—å –∑–¥–µ—Å—å –ø–æ–≥—Ä–æ–º?',
                               '–î–∞–≤–∞–π –ª—É—á—à–µ –∏–≥—Ä–∞—Ç—å —É –º–µ–Ω—è –¥–æ–º–∞! üòâ')
    else:
        with home.typing():
            if arg == 'ench':
                pass


@test.command()
async def ans(ctx, *arg):
    pass


@test.command()
async def finish(ctx):
    pass


with open('token.txt') as token:
    bot.run(token.readline())
